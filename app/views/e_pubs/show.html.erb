<% provide :page_title, @title || "Title" %>
<%# https://github.com/mlibrary/heliotrope/issues/1228 %>
<% content_for :head do %>
  <meta name="turbolinks-cache-control" content="no-cache">
  <script type="text/javascript" src="https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js"></script>
  <% if @parent_presenter.doi.present? %>
    <script async src="https://badge.dimensions.ai/badge.js" charset="utf-8"></script>
  <% end %>
  
  <!-- hypothes.is -->
  <script type="text/javascript">
    window.hypothesisConfig = function () {
      return {
        openSidebar: false,
        theme: 'clean', // "clean" or "classic"
        enableMultiFrameSupport: true,
        onLayoutChange: function(state) {
          var $frame = $('.annotator-frame');
          var $reader = $("#reader");
        },
        enableExperimentalNewNoteButton: true
      };
    };
  </script>
  <script src="https://cdn.hypothes.is/hypothesis"></script>

  <% if @parent_presenter.webgl? %>
    <%
# load what we need to show the webgl/3-d model if needed
webgl_id = @parent_presenter.webgl_id
webgl = Webgl::Unity.from_directory(UnpackService.root_path_from_noid(webgl_id, 'webgl'))
@unity_loader = "/webgl/#{webgl_id}/#{webgl.unity_loader}"
@unity_json = "/webgl/#{webgl_id}/#{webgl.unity_json}"
    %>
       <!-- browser detection here -->
     <script src="<%= @unity_loader %>"></script>
	   <script>
 	   // this has to go right after @unity_loader is loaded to guarantee no random JS errors get alert-boxed
      	UnityLoader.Error.handler = function(e, t){
          // NOP to stop the nuisance alert boxes for *all* (even non-Unity) JS errors
        }
	   </script>
  <% end %>
<% end %>

<% provide :body do %>
  <% if defined? @presenter.file_set_coins_title %>
    <span class="Z3988" title="<%= @presenter.file_set_coins_title %>" aria-hidden="true"></span>
  <% end %>
  <div class="skip"></div>
  <div id="epub" class="<%= @subdomain %>">
    <div id="reader"></div>

    <script type="text/javascript">
      if ( true ) {

        
        // Create custom annotator button that is aware of its state
        AnnotationTool = cozy.Control.Widget.Toggle.extend({
          defaultTemplate: '<button data-hypothesis-trigger class="button--sm annotation" data-toggle="button" aria-label="Open Annotations"><i class="fa fa-pencil" title="Open annotation panel" aria-hidden="true"></i></button><div class="annotation-count" data-hypothesis-annotation-count></div>',


          initialize: function(options) {

            cozy.Control.Widget.Toggle.prototype.initialize.apply(this, arguments);

            this.options.states = [{
              stateName: 'close-annotator',
              onClick: this.openAnnotator.bind(this)
            },
            {
              stateName: 'open-annotator',
              onClick: this.closeAnnotator.bind(this)
            }];
          },

          _onAddExtra: function(container) {
            // super._onAddExtra(container);
            cozy.Control.Widget.Toggle.prototype._onAddExtra.apply(this, arguments);
            this.setupHook();
            return container;
          },

          openAnnotator: function(self, reader) {
            this.options.$panel.removeClass("annotator-collapsed");
            self.state('open-annotator');
          },

          closeAnnotator: function(self, reader) {
            this.options.$panel.addClass("annotator-collapsed");
            self.state('close-annotator');
          },

          setupHook: function() {
            var reader = this._reader;
            reader.rendition.hooks.content.register(function(contents, view) {
              contents.window.addEventListener('scrolltorange', function (e) {
                var range = e.detail;
                var cfi = new reader.CFI(range, contents.cfiBase).toString();
                if (cfi) {
                  reader.gotoPage(cfi);
                }
                e.preventDefault();
              });
            })
          }
        })
    

        // Configure and initiate reader
        var reader = cozy.reader('reader', {
          href: "<%= "#{main_app.epub_url.gsub!(/\?.*/, '')}/" %>",
          skipLink: '.skip',
          download_links: <%= @ebook_download_presenter.csb_download_links.to_json.html_safe %>,
          loader_template: '<div class="fulcrum-loading"><div class="rect rect1"></div><div class="circle circ1"></div><div class="rect rect2"></div><div class="circle circ2"></div></div>',
          <% if %w[michigan].include? @subdomain %>
          injectStylesheet: '/css/fulcrum_enhanced_display.css',
          <% end %>
          metadata: {
            doi: '<%= @citable_link %>',
            location: 'Ann Arbor, MI'
          }
        });

        <%= render "cozy_controls_top", presenter: @presenter, parent_presenter: @parent_presenter %>

        <%= render "webgl_specific", presenter: @presenter, parent_presenter: @parent_presenter %>

        <%= render "cozy_controls_bottom", presenter: @presenter, parent_presenter: @parent_presenter %>

        // Annotation widget checks and initialization
        var tm;
        function checkForAnnotator(cb, w) {
          if (!w) {
            w = window;
          }
          tm = setTimeout(function () {
            if (w && w.annotator) {
              clearTimeout(tm);
              cb();
            } else {
              checkForAnnotator(cb, w);
            }
          }, 100);
        }

        var $panel = $('.annotator-frame');

        // pass the reference to the panel
        var annotation_tool = new AnnotationTool({
          region: 'top.toolbar.left',
          $panel: $panel
        })
        annotation_tool.addTo(reader);

        <% if @parent_presenter.webgl? %>
          open_panel();
        <% end %>

        // Initiate EPUB Reader
        reader.start(function() {
          <% if @parent_presenter.webgl? %>
            fetch_poi();
          <% end %>
        });
      }
    </script>
  </div>
  <%= render 'shared/ga' %>
<% end %>
<%= render template: 'layouts/boilerplate' %>
